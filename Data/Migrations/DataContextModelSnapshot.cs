// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("CarShowroom", b =>
                {
                    b.Property<int>("CarsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShowroomsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CarsId", "ShowroomsId");

                    b.HasIndex("ShowroomsId");

                    b.ToTable("CarShowroom");
                });

            modelBuilder.Entity("api.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CarId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RGB")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CarId1");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("api.Entities.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbrOfCars")
                        .HasColumnType("INTEGER");

                    b.Property<string>("dateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("api.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Entities.Showroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descriptiom")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NbrOfCars")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Showrooms");
                });

            modelBuilder.Entity("api.Entities.Texture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("TreeDModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TreeDModelId");

                    b.ToTable("Textures");
                });

            modelBuilder.Entity("api.Entities.TreeDModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("TreeDModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TreeDModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("admin")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Entities.Car", b =>
                {
                    b.HasBaseType("api.Entities.TreeDModel");

                    b.Property<string>("Categorie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descriptiom")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Car");
                });

            modelBuilder.Entity("api.Entities.Wheel", b =>
                {
                    b.HasBaseType("api.Entities.TreeDModel");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descriptiom")
                        .HasColumnType("TEXT");

                    b.Property<int?>("imageId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CarId");

                    b.HasIndex("imageId");

                    b.ToTable("TreeDModels", t =>
                        {
                            t.Property("Descriptiom")
                                .HasColumnName("Wheel_Descriptiom");
                        });

                    b.HasDiscriminator().HasValue("Wheel");
                });

            modelBuilder.Entity("api.Entities.Constructor", b =>
                {
                    b.HasBaseType("api.Entities.User");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Logo2dId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Logo3dId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Logo2dId");

                    b.HasIndex("Logo3dId");

                    b.HasDiscriminator().HasValue("Constructor");
                });

            modelBuilder.Entity("CarShowroom", b =>
                {
                    b.HasOne("api.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Showroom", null)
                        .WithMany()
                        .HasForeignKey("ShowroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Color", b =>
                {
                    b.HasOne("api.Entities.Car", null)
                        .WithMany("Colors")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId1");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("api.Entities.Image", b =>
                {
                    b.HasOne("api.Entities.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("api.Entities.Showroom", b =>
                {
                    b.HasOne("api.Entities.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("api.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.Navigation("Environment");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("api.Entities.Texture", b =>
                {
                    b.HasOne("api.Entities.TreeDModel", "TreeDModel")
                        .WithMany("Textures")
                        .HasForeignKey("TreeDModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeDModel");
                });

            modelBuilder.Entity("api.Entities.TreeDModel", b =>
                {
                    b.HasOne("api.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("api.Entities.Wheel", b =>
                {
                    b.HasOne("api.Entities.Car", "Car")
                        .WithMany("Wheels")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Texture", "image")
                        .WithMany()
                        .HasForeignKey("imageId");

                    b.Navigation("Car");

                    b.Navigation("image");
                });

            modelBuilder.Entity("api.Entities.Constructor", b =>
                {
                    b.HasOne("api.Entities.Texture", "Logo2d")
                        .WithMany()
                        .HasForeignKey("Logo2dId");

                    b.HasOne("api.Entities.TreeDModel", "Logo3d")
                        .WithMany()
                        .HasForeignKey("Logo3dId");

                    b.Navigation("Logo2d");

                    b.Navigation("Logo3d");
                });

            modelBuilder.Entity("api.Entities.TreeDModel", b =>
                {
                    b.Navigation("Textures");
                });

            modelBuilder.Entity("api.Entities.Car", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Images");

                    b.Navigation("Wheels");
                });
#pragma warning restore 612, 618
        }
    }
}
